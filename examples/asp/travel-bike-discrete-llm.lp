constraint((0,"count(root.carrier.bag)+count(root.frame.bag)<=4"),"boolean").
constraint((1,"root.totalWeight[0]=root.frontWheel[0].weight[0]+root.rearWheel[0].weight[0]+sum(root.carrier.bag.capacity.weight)+sum(root.frame.bag.capacity.weight)"),"boolean").
constraint((2,"root.totalWeight[0]<=root.maxWeight[0]*1000"),"boolean").
constraint((3,"root.totalVolume[0]=sum(root.carrier.bag.capacity.volume)+sum(root.frame.bag.capacity.volume)"),"boolean").
constraint((4,"root.totalVolume[0]>=root.requestedVolume[0]"),"boolean").
constraint((5,"!root.color[0]=Red||root.frontWheel[0].size[0]=20"),"boolean").
constraint((6,"!root.carrier[0].bag[0].material[0]=Leather||root.carrier[0].bag[0].capacity[0]=B10"),"boolean").
constraint((6,"!root.carrier[0].bag[1].material[0]=Leather||root.carrier[0].bag[1].capacity[0]=B10"),"boolean").
constraint((6,"!root.carrier[0].bag[2].material[0]=Leather||root.carrier[0].bag[2].capacity[0]=B10"),"boolean").
constraint((6,"!root.frame[0].bag[0].material[0]=Leather||root.frame[0].bag[0].capacity[0]=B10"),"boolean").
constraint((6,"!root.frame[0].bag[1].material[0]=Leather||root.frame[0].bag[1].capacity[0]=B10"),"boolean").
constraint(("Wheel","root.frontWheel[0]"),"table").
constraint(("Wheel","root.rearWheel[0]"),"table").
constraint(("Capacity","root.carrier[0].bag[0]"),"table").
constraint(("Capacity","root.carrier[0].bag[1]"),"table").
constraint(("Capacity","root.carrier[0].bag[2]"),"table").
constraint(("Capacity","root.frame[0].bag[0]"),"table").
constraint(("Capacity","root.frame[0].bag[1]"),"table").
constraint(("root.totalWeight",1),"lowerbound").
constraint(("root.maxWeight",1),"lowerbound").
constraint(("root.totalVolume",1),"lowerbound").
constraint(("root.requestedVolume",1),"lowerbound").
constraint(("root.frontWheel",1),"lowerbound").
constraint(("root.frontWheel[0].size",1),"lowerbound").
constraint(("root.frontWheel[0].weight",1),"lowerbound").
constraint(("root.rearWheel",1),"lowerbound").
constraint(("root.rearWheel[0].size",1),"lowerbound").
constraint(("root.rearWheel[0].weight",1),"lowerbound").
constraint(("root.carrier",1),"lowerbound").
constraint(("root.frame",1),"lowerbound").
constraint(("root.color",1),"lowerbound").
constraint(("root.carrier[0].bag",0),"lowerbound").
constraint(("root.carrier[0].bag[0].capacity",1),"lowerbound").
constraint(("root.carrier[0].bag[0].capacity[0].volume",1),"lowerbound").
constraint(("root.carrier[0].bag[0].capacity[0].weight",1),"lowerbound").
constraint(("root.carrier[0].bag[0].material",1),"lowerbound").
constraint(("root.carrier[0].bag[1].capacity",1),"lowerbound").
constraint(("root.carrier[0].bag[1].capacity[0].volume",1),"lowerbound").
constraint(("root.carrier[0].bag[1].capacity[0].weight",1),"lowerbound").
constraint(("root.carrier[0].bag[1].material",1),"lowerbound").
constraint(("root.carrier[0].bag[2].capacity",1),"lowerbound").
constraint(("root.carrier[0].bag[2].capacity[0].volume",1),"lowerbound").
constraint(("root.carrier[0].bag[2].capacity[0].weight",1),"lowerbound").
constraint(("root.carrier[0].bag[2].material",1),"lowerbound").
constraint(("root.frame[0].bag",0),"lowerbound").
constraint(("root.frame[0].bag[0].capacity",1),"lowerbound").
constraint(("root.frame[0].bag[0].capacity[0].volume",1),"lowerbound").
constraint(("root.frame[0].bag[0].capacity[0].weight",1),"lowerbound").
constraint(("root.frame[0].bag[0].material",1),"lowerbound").
constraint(("root.frame[0].bag[1].capacity",1),"lowerbound").
constraint(("root.frame[0].bag[1].capacity[0].volume",1),"lowerbound").
constraint(("root.frame[0].bag[1].capacity[0].weight",1),"lowerbound").
constraint(("root.frame[0].bag[1].material",1),"lowerbound").
constraint_explanation((0,"count(root.carrier.bag)+count(root.frame.bag)<=4"),"The number of bags of the carrier plus the number of bags of the frame should be less than or equal to 4.").
constraint_explanation((1,"root.totalWeight[0]=root.frontWheel[0].weight[0]+root.rearWheel[0].weight[0]+sum(root.carrier.bag.capacity.weight)+sum(root.frame.bag.capacity.weight)"),"The total weight should be equal to the weight of the front wheel plus the weight of the rear wheel plus the combined weight of the capacities of the bags of the carrier and the capacities of the bags of the frame.").
constraint_explanation((2,"root.totalWeight[0]<=root.maxWeight[0]*1000"),"The total weight should be less than or equal to the maximum weight multiplied by 1000.").
constraint_explanation((3,"root.totalVolume[0]=sum(root.carrier.bag.capacity.volume)+sum(root.frame.bag.capacity.volume)"),"The total volume should be equal to the sum of the volumes of the capacities of the bags of the carrier plus the sum of the volumes of the capacities of the bags of the frame.").
constraint_explanation((4,"root.totalVolume[0]>=root.requestedVolume[0]"),"The total volume should be greater than or equal to the requested volume.").
constraint_explanation((5,"!root.color[0]=Red||root.frontWheel[0].size[0]=20"),"If the color is red, then the size of the front wheel should be 20.").
constraint_explanation((6,"!root.carrier[0].bag[0].material[0]=Leather||root.carrier[0].bag[0].capacity[0]=B10"),"If the material of the first bag of the first carrier is leather, then the capacity of the first bag of the first carrier should be B10.").
constraint_explanation((6,"!root.carrier[0].bag[1].material[0]=Leather||root.carrier[0].bag[1].capacity[0]=B10"),"If the material of the second bag of the carrier is leather, then the capacity of the second bag of the carrier should be B10.").
constraint_explanation((6,"!root.carrier[0].bag[2].material[0]=Leather||root.carrier[0].bag[2].capacity[0]=B10"),"If the material of the third bag of the carrier is leather, then the capacity of the third bag of the carrier should be B10.").
constraint_explanation((6,"!root.frame[0].bag[0].material[0]=Leather||root.frame[0].bag[0].capacity[0]=B10"),"If the material of the bag of the frame is leather, then the capacity of the bag of the frame should be B10.").
constraint_explanation((6,"!root.frame[0].bag[1].material[0]=Leather||root.frame[0].bag[1].capacity[0]=B10"),"If the material of the second bag of the frame is leather, then the capacity of the second bag of the frame should be B10.").
part("root").
part("Carrier").
part("Frame").
part("Bag").
integer("product.totalWeight").
integer("product.maxWeight").
integer("product.totalVolume").
integer("product.requestedVolume").
range("product.totalWeight",1,10000).
range("product.maxWeight",10,10).
range("product.totalVolume",0,200).
range("product.requestedVolume",200,200).
discrete("Capacity").
discrete("Capacity.volume").
discrete("Capacity.weight").
discrete("Material").
discrete("Wheel").
discrete("Wheel.size").
discrete("Wheel.weight").
discrete("Color").
domain("Capacity","B10").
domain("Capacity","B20").
domain("Capacity","B50").
domain("Capacity","B100").
domain("Capacity.volume",10).
domain("Capacity.volume",20).
domain("Capacity.volume",50).
domain("Capacity.volume",100).
domain("Capacity.weight",100).
domain("Capacity.weight",250).
domain("Capacity.weight",600).
domain("Capacity.weight",1200).
domain("Material","Cotton").
domain("Material","Leather").
domain("Material","Polyester").
domain("Wheel","W20").
domain("Wheel","W22").
domain("Wheel","W24").
domain("Wheel","W26").
domain("Wheel","W28").
domain("Wheel.size",20).
domain("Wheel.size",22).
domain("Wheel.size",24).
domain("Wheel.size",26).
domain("Wheel.size",28).
domain("Wheel.weight",650).
domain("Wheel.weight",700).
domain("Wheel.weight",800).
domain("Wheel.weight",900).
domain("Wheel.weight",1000).
domain("Color","Red").
domain("Color","Green").
domain("Color","Yellow").
domain("Color","Blue").
type("root","product").
type("root.totalWeight[0]","product.totalWeight").
type("root.maxWeight[0]","product.maxWeight").
type("root.totalVolume[0]","product.totalVolume").
type("root.requestedVolume[0]","product.requestedVolume").
type("root.carrier[0]","Carrier").
type("root.frame[0]","Frame").
type("root.carrier[0].bag[0]","Bag").
type("root.carrier[0].bag[1]","Bag").
type("root.carrier[0].bag[2]","Bag").
type("root.frame[0].bag[0]","Bag").
type("root.frame[0].bag[1]","Bag").
type("root.frontWheel[0]","Wheel").
type("root.frontWheel[0].size[0]","Wheel.size").
type("root.frontWheel[0].weight[0]","Wheel.weight").
type("root.rearWheel[0]","Wheel").
type("root.rearWheel[0].size[0]","Wheel.size").
type("root.rearWheel[0].weight[0]","Wheel.weight").
type("root.color[0]","Color").
type("root.carrier[0].bag[0].capacity[0]","Capacity").
type("root.carrier[0].bag[0].capacity[0].volume[0]","Capacity.volume").
type("root.carrier[0].bag[0].capacity[0].weight[0]","Capacity.weight").
type("root.carrier[0].bag[1].capacity[0]","Capacity").
type("root.carrier[0].bag[1].capacity[0].volume[0]","Capacity.volume").
type("root.carrier[0].bag[1].capacity[0].weight[0]","Capacity.weight").
type("root.carrier[0].bag[2].capacity[0]","Capacity").
type("root.carrier[0].bag[2].capacity[0].volume[0]","Capacity.volume").
type("root.carrier[0].bag[2].capacity[0].weight[0]","Capacity.weight").
type("root.carrier[0].bag[0].material[0]","Material").
type("root.carrier[0].bag[1].material[0]","Material").
type("root.carrier[0].bag[2].material[0]","Material").
type("root.frame[0].bag[0].capacity[0]","Capacity").
type("root.frame[0].bag[0].capacity[0].volume[0]","Capacity.volume").
type("root.frame[0].bag[0].capacity[0].weight[0]","Capacity.weight").
type("root.frame[0].bag[1].capacity[0]","Capacity").
type("root.frame[0].bag[1].capacity[0].volume[0]","Capacity.volume").
type("root.frame[0].bag[1].capacity[0].weight[0]","Capacity.weight").
type("root.frame[0].bag[0].material[0]","Material").
type("root.frame[0].bag[1].material[0]","Material").
index("root.totalWeight[0]",0).
index("root.maxWeight[0]",0).
index("root.totalVolume[0]",0).
index("root.requestedVolume[0]",0).
index("root.carrier[0]",0).
index("root.frame[0]",0).
index("root.carrier[0].bag[0]",0).
index("root.carrier[0].bag[1]",1).
index("root.carrier[0].bag[2]",2).
index("root.frame[0].bag[0]",0).
index("root.frame[0].bag[1]",1).
index("root.frontWheel[0]",0).
index("root.frontWheel[0].size[0]",0).
index("root.frontWheel[0].weight[0]",0).
index("root.rearWheel[0]",0).
index("root.rearWheel[0].size[0]",0).
index("root.rearWheel[0].weight[0]",0).
index("root.color[0]",0).
index("root.carrier[0].bag[0].capacity[0]",0).
index("root.carrier[0].bag[0].capacity[0].volume[0]",0).
index("root.carrier[0].bag[0].capacity[0].weight[0]",0).
index("root.carrier[0].bag[1].capacity[0]",0).
index("root.carrier[0].bag[1].capacity[0].volume[0]",0).
index("root.carrier[0].bag[1].capacity[0].weight[0]",0).
index("root.carrier[0].bag[2].capacity[0]",0).
index("root.carrier[0].bag[2].capacity[0].volume[0]",0).
index("root.carrier[0].bag[2].capacity[0].weight[0]",0).
index("root.carrier[0].bag[0].material[0]",0).
index("root.carrier[0].bag[1].material[0]",0).
index("root.carrier[0].bag[2].material[0]",0).
index("root.frame[0].bag[0].capacity[0]",0).
index("root.frame[0].bag[0].capacity[0].volume[0]",0).
index("root.frame[0].bag[0].capacity[0].weight[0]",0).
index("root.frame[0].bag[1].capacity[0]",0).
index("root.frame[0].bag[1].capacity[0].volume[0]",0).
index("root.frame[0].bag[1].capacity[0].weight[0]",0).
index("root.frame[0].bag[0].material[0]",0).
index("root.frame[0].bag[1].material[0]",0).
parent("root.totalWeight[0]","root").
parent("root.maxWeight[0]","root").
parent("root.totalVolume[0]","root").
parent("root.requestedVolume[0]","root").
parent("root.carrier[0]","root").
parent("root.frame[0]","root").
parent("root.carrier[0].bag[0]","root.carrier[0]").
parent("root.carrier[0].bag[1]","root.carrier[0]").
parent("root.carrier[0].bag[2]","root.carrier[0]").
parent("root.frame[0].bag[0]","root.frame[0]").
parent("root.frame[0].bag[1]","root.frame[0]").
parent("root.frontWheel[0]","root").
parent("root.frontWheel[0].size[0]","root.frontWheel[0]").
parent("root.frontWheel[0].weight[0]","root.frontWheel[0]").
parent("root.rearWheel[0]","root").
parent("root.rearWheel[0].size[0]","root.rearWheel[0]").
parent("root.rearWheel[0].weight[0]","root.rearWheel[0]").
parent("root.color[0]","root").
parent("root.carrier[0].bag[0].capacity[0]","root.carrier[0].bag[0]").
parent("root.carrier[0].bag[0].capacity[0].volume[0]","root.carrier[0].bag[0].capacity[0]").
parent("root.carrier[0].bag[0].capacity[0].weight[0]","root.carrier[0].bag[0].capacity[0]").
parent("root.carrier[0].bag[1].capacity[0]","root.carrier[0].bag[1]").
parent("root.carrier[0].bag[1].capacity[0].volume[0]","root.carrier[0].bag[1].capacity[0]").
parent("root.carrier[0].bag[1].capacity[0].weight[0]","root.carrier[0].bag[1].capacity[0]").
parent("root.carrier[0].bag[2].capacity[0]","root.carrier[0].bag[2]").
parent("root.carrier[0].bag[2].capacity[0].volume[0]","root.carrier[0].bag[2].capacity[0]").
parent("root.carrier[0].bag[2].capacity[0].weight[0]","root.carrier[0].bag[2].capacity[0]").
parent("root.carrier[0].bag[0].material[0]","root.carrier[0].bag[0]").
parent("root.carrier[0].bag[1].material[0]","root.carrier[0].bag[1]").
parent("root.carrier[0].bag[2].material[0]","root.carrier[0].bag[2]").
parent("root.frame[0].bag[0].capacity[0]","root.frame[0].bag[0]").
parent("root.frame[0].bag[0].capacity[0].volume[0]","root.frame[0].bag[0].capacity[0]").
parent("root.frame[0].bag[0].capacity[0].weight[0]","root.frame[0].bag[0].capacity[0]").
parent("root.frame[0].bag[1].capacity[0]","root.frame[0].bag[1]").
parent("root.frame[0].bag[1].capacity[0].volume[0]","root.frame[0].bag[1].capacity[0]").
parent("root.frame[0].bag[1].capacity[0].weight[0]","root.frame[0].bag[1].capacity[0]").
parent("root.frame[0].bag[0].material[0]","root.frame[0].bag[0]").
parent("root.frame[0].bag[1].material[0]","root.frame[0].bag[1]").
binary("count(root.carrier.bag)+count(root.frame.bag)<=4","count(root.carrier.bag)+count(root.frame.bag)","<=","4").
binary("count(root.carrier.bag)+count(root.frame.bag)","count(root.carrier.bag)","+","count(root.frame.bag)").
binary("root.totalWeight[0]=root.frontWheel[0].weight[0]+root.rearWheel[0].weight[0]+sum(root.carrier.bag.capacity.weight)+sum(root.frame.bag.capacity.weight)","root.totalWeight[0]","=","root.frontWheel[0].weight[0]+root.rearWheel[0].weight[0]+sum(root.carrier.bag.capacity.weight)+sum(root.frame.bag.capacity.weight)").
binary("root.frontWheel[0].weight[0]+root.rearWheel[0].weight[0]+sum(root.carrier.bag.capacity.weight)+sum(root.frame.bag.capacity.weight)","root.frontWheel[0].weight[0]","+","root.rearWheel[0].weight[0]+sum(root.carrier.bag.capacity.weight)+sum(root.frame.bag.capacity.weight)").
binary("root.rearWheel[0].weight[0]+sum(root.carrier.bag.capacity.weight)+sum(root.frame.bag.capacity.weight)","root.rearWheel[0].weight[0]","+","sum(root.carrier.bag.capacity.weight)+sum(root.frame.bag.capacity.weight)").
binary("sum(root.carrier.bag.capacity.weight)+sum(root.frame.bag.capacity.weight)","sum(root.carrier.bag.capacity.weight)","+","sum(root.frame.bag.capacity.weight)").
binary("root.totalWeight[0]<=root.maxWeight[0]*1000","root.totalWeight[0]","<=","root.maxWeight[0]*1000").
binary("root.maxWeight[0]*1000","root.maxWeight[0]","*","1000").
binary("root.totalVolume[0]=sum(root.carrier.bag.capacity.volume)+sum(root.frame.bag.capacity.volume)","root.totalVolume[0]","=","sum(root.carrier.bag.capacity.volume)+sum(root.frame.bag.capacity.volume)").
binary("sum(root.carrier.bag.capacity.volume)+sum(root.frame.bag.capacity.volume)","sum(root.carrier.bag.capacity.volume)","+","sum(root.frame.bag.capacity.volume)").
binary("root.totalVolume[0]>=root.requestedVolume[0]","root.totalVolume[0]",">=","root.requestedVolume[0]").
binary("!root.color[0]=Red||root.frontWheel[0].size[0]=20","!root.color[0]=Red","||","root.frontWheel[0].size[0]=20").
binary("root.color[0]=Red","root.color[0]","=","Red").
binary("root.frontWheel[0].size[0]=20","root.frontWheel[0].size[0]","=","20").
binary("!root.carrier[0].bag[0].material[0]=Leather||root.carrier[0].bag[0].capacity[0]=B10","!root.carrier[0].bag[0].material[0]=Leather","||","root.carrier[0].bag[0].capacity[0]=B10").
binary("root.carrier[0].bag[0].material[0]=Leather","root.carrier[0].bag[0].material[0]","=","Leather").
binary("root.carrier[0].bag[0].capacity[0]=B10","root.carrier[0].bag[0].capacity[0]","=","B10").
binary("!root.carrier[0].bag[1].material[0]=Leather||root.carrier[0].bag[1].capacity[0]=B10","!root.carrier[0].bag[1].material[0]=Leather","||","root.carrier[0].bag[1].capacity[0]=B10").
binary("root.carrier[0].bag[1].material[0]=Leather","root.carrier[0].bag[1].material[0]","=","Leather").
binary("root.carrier[0].bag[1].capacity[0]=B10","root.carrier[0].bag[1].capacity[0]","=","B10").
binary("!root.carrier[0].bag[2].material[0]=Leather||root.carrier[0].bag[2].capacity[0]=B10","!root.carrier[0].bag[2].material[0]=Leather","||","root.carrier[0].bag[2].capacity[0]=B10").
binary("root.carrier[0].bag[2].material[0]=Leather","root.carrier[0].bag[2].material[0]","=","Leather").
binary("root.carrier[0].bag[2].capacity[0]=B10","root.carrier[0].bag[2].capacity[0]","=","B10").
binary("!root.frame[0].bag[0].material[0]=Leather||root.frame[0].bag[0].capacity[0]=B10","!root.frame[0].bag[0].material[0]=Leather","||","root.frame[0].bag[0].capacity[0]=B10").
binary("root.frame[0].bag[0].material[0]=Leather","root.frame[0].bag[0].material[0]","=","Leather").
binary("root.frame[0].bag[0].capacity[0]=B10","root.frame[0].bag[0].capacity[0]","=","B10").
binary("!root.frame[0].bag[1].material[0]=Leather||root.frame[0].bag[1].capacity[0]=B10","!root.frame[0].bag[1].material[0]=Leather","||","root.frame[0].bag[1].capacity[0]=B10").
binary("root.frame[0].bag[1].material[0]=Leather","root.frame[0].bag[1].material[0]","=","Leather").
binary("root.frame[0].bag[1].capacity[0]=B10","root.frame[0].bag[1].capacity[0]","=","B10").
function("count(root.carrier.bag)","count","root.carrier.bag").
function("count(root.frame.bag)","count","root.frame.bag").
function("sum(root.carrier.bag.capacity.weight)","sum","root.carrier.bag.capacity.weight").
function("sum(root.frame.bag.capacity.weight)","sum","root.frame.bag.capacity.weight").
function("sum(root.carrier.bag.capacity.volume)","sum","root.carrier.bag.capacity.volume").
function("sum(root.frame.bag.capacity.volume)","sum","root.frame.bag.capacity.volume").
set("root.carrier.bag","root.carrier[0].bag[0]").
set("root.carrier.bag","root.carrier[0].bag[1]").
set("root.carrier.bag","root.carrier[0].bag[2]").
set("root.frame.bag","root.frame[0].bag[0]").
set("root.frame.bag","root.frame[0].bag[1]").
set("root.carrier.bag.capacity.weight","root.carrier[0].bag[0].capacity[0].weight[0]").
set("root.carrier.bag.capacity.weight","root.carrier[0].bag[1].capacity[0].weight[0]").
set("root.carrier.bag.capacity.weight","root.carrier[0].bag[2].capacity[0].weight[0]").
set("root.frame.bag.capacity.weight","root.frame[0].bag[0].capacity[0].weight[0]").
set("root.frame.bag.capacity.weight","root.frame[0].bag[1].capacity[0].weight[0]").
set("root.carrier.bag.capacity.volume","root.carrier[0].bag[0].capacity[0].volume[0]").
set("root.carrier.bag.capacity.volume","root.carrier[0].bag[1].capacity[0].volume[0]").
set("root.carrier.bag.capacity.volume","root.carrier[0].bag[2].capacity[0].volume[0]").
set("root.frame.bag.capacity.volume","root.frame[0].bag[0].capacity[0].volume[0]").
set("root.frame.bag.capacity.volume","root.frame[0].bag[1].capacity[0].volume[0]").
set("root.totalWeight","root.totalWeight[0]").
set("root.maxWeight","root.maxWeight[0]").
set("root.totalVolume","root.totalVolume[0]").
set("root.requestedVolume","root.requestedVolume[0]").
set("root.frontWheel","root.frontWheel[0]").
set("root.frontWheel[0].size","root.frontWheel[0].size[0]").
set("root.frontWheel[0].weight","root.frontWheel[0].weight[0]").
set("root.rearWheel","root.rearWheel[0]").
set("root.rearWheel[0].size","root.rearWheel[0].size[0]").
set("root.rearWheel[0].weight","root.rearWheel[0].weight[0]").
set("root.carrier","root.carrier[0]").
set("root.frame","root.frame[0]").
set("root.color","root.color[0]").
set("root.carrier[0].bag","root.carrier[0].bag[0]").
set("root.carrier[0].bag","root.carrier[0].bag[1]").
set("root.carrier[0].bag","root.carrier[0].bag[2]").
set("root.carrier[0].bag[0].capacity","root.carrier[0].bag[0].capacity[0]").
set("root.carrier[0].bag[0].capacity[0].volume","root.carrier[0].bag[0].capacity[0].volume[0]").
set("root.carrier[0].bag[0].capacity[0].weight","root.carrier[0].bag[0].capacity[0].weight[0]").
set("root.carrier[0].bag[0].material","root.carrier[0].bag[0].material[0]").
set("root.carrier[0].bag[1].capacity","root.carrier[0].bag[1].capacity[0]").
set("root.carrier[0].bag[1].capacity[0].volume","root.carrier[0].bag[1].capacity[0].volume[0]").
set("root.carrier[0].bag[1].capacity[0].weight","root.carrier[0].bag[1].capacity[0].weight[0]").
set("root.carrier[0].bag[1].material","root.carrier[0].bag[1].material[0]").
set("root.carrier[0].bag[2].capacity","root.carrier[0].bag[2].capacity[0]").
set("root.carrier[0].bag[2].capacity[0].volume","root.carrier[0].bag[2].capacity[0].volume[0]").
set("root.carrier[0].bag[2].capacity[0].weight","root.carrier[0].bag[2].capacity[0].weight[0]").
set("root.carrier[0].bag[2].material","root.carrier[0].bag[2].material[0]").
set("root.frame[0].bag","root.frame[0].bag[0]").
set("root.frame[0].bag","root.frame[0].bag[1]").
set("root.frame[0].bag[0].capacity","root.frame[0].bag[0].capacity[0]").
set("root.frame[0].bag[0].capacity[0].volume","root.frame[0].bag[0].capacity[0].volume[0]").
set("root.frame[0].bag[0].capacity[0].weight","root.frame[0].bag[0].capacity[0].weight[0]").
set("root.frame[0].bag[0].material","root.frame[0].bag[0].material[0]").
set("root.frame[0].bag[1].capacity","root.frame[0].bag[1].capacity[0]").
set("root.frame[0].bag[1].capacity[0].volume","root.frame[0].bag[1].capacity[0].volume[0]").
set("root.frame[0].bag[1].capacity[0].weight","root.frame[0].bag[1].capacity[0].weight[0]").
set("root.frame[0].bag[1].material","root.frame[0].bag[1].material[0]").
number("4",4).
number("1000",1000).
number("20",20).
unary("!root.color[0]=Red","!","root.color[0]=Red").
unary("!root.carrier[0].bag[0].material[0]=Leather","!","root.carrier[0].bag[0].material[0]=Leather").
unary("!root.carrier[0].bag[1].material[0]=Leather","!","root.carrier[0].bag[1].material[0]=Leather").
unary("!root.carrier[0].bag[2].material[0]=Leather","!","root.carrier[0].bag[2].material[0]=Leather").
unary("!root.frame[0].bag[0].material[0]=Leather","!","root.frame[0].bag[0].material[0]=Leather").
unary("!root.frame[0].bag[1].material[0]=Leather","!","root.frame[0].bag[1].material[0]=Leather").
constant("Red").
constant("Leather").
constant("B10").
column(("Wheel","root.frontWheel[0]"),0,0,"root.frontWheel[0]").
column(("Wheel","root.frontWheel[0]"),0,1,"root.frontWheel[0].size[0]").
column(("Wheel","root.frontWheel[0]"),0,2,"root.frontWheel[0].weight[0]").
column(("Wheel","root.rearWheel[0]"),0,0,"root.rearWheel[0]").
column(("Wheel","root.rearWheel[0]"),0,1,"root.rearWheel[0].size[0]").
column(("Wheel","root.rearWheel[0]"),0,2,"root.rearWheel[0].weight[0]").
column(("Capacity","root.carrier[0].bag[0]"),0,0,"root.carrier[0].bag[0].capacity[0]").
column(("Capacity","root.carrier[0].bag[0]"),0,1,"root.carrier[0].bag[0].capacity[0].volume[0]").
column(("Capacity","root.carrier[0].bag[0]"),0,2,"root.carrier[0].bag[0].capacity[0].weight[0]").
column(("Capacity","root.carrier[0].bag[1]"),0,0,"root.carrier[0].bag[1].capacity[0]").
column(("Capacity","root.carrier[0].bag[1]"),0,1,"root.carrier[0].bag[1].capacity[0].volume[0]").
column(("Capacity","root.carrier[0].bag[1]"),0,2,"root.carrier[0].bag[1].capacity[0].weight[0]").
column(("Capacity","root.carrier[0].bag[2]"),0,0,"root.carrier[0].bag[2].capacity[0]").
column(("Capacity","root.carrier[0].bag[2]"),0,1,"root.carrier[0].bag[2].capacity[0].volume[0]").
column(("Capacity","root.carrier[0].bag[2]"),0,2,"root.carrier[0].bag[2].capacity[0].weight[0]").
column(("Capacity","root.frame[0].bag[0]"),0,0,"root.frame[0].bag[0].capacity[0]").
column(("Capacity","root.frame[0].bag[0]"),0,1,"root.frame[0].bag[0].capacity[0].volume[0]").
column(("Capacity","root.frame[0].bag[0]"),0,2,"root.frame[0].bag[0].capacity[0].weight[0]").
column(("Capacity","root.frame[0].bag[1]"),0,0,"root.frame[0].bag[1].capacity[0]").
column(("Capacity","root.frame[0].bag[1]"),0,1,"root.frame[0].bag[1].capacity[0].volume[0]").
column(("Capacity","root.frame[0].bag[1]"),0,2,"root.frame[0].bag[1].capacity[0].weight[0]").
allow("Wheel",(0,0),"W20").
allow("Wheel",(1,0),20).
allow("Wheel",(2,0),650).
allow("Wheel",(0,1),"W22").
allow("Wheel",(1,1),22).
allow("Wheel",(2,1),700).
allow("Wheel",(0,2),"W24").
allow("Wheel",(1,2),24).
allow("Wheel",(2,2),800).
allow("Wheel",(0,3),"W26").
allow("Wheel",(1,3),26).
allow("Wheel",(2,3),900).
allow("Wheel",(0,4),"W28").
allow("Wheel",(1,4),28).
allow("Wheel",(2,4),1000).
allow("Capacity",(0,0),"B10").
allow("Capacity",(1,0),10).
allow("Capacity",(2,0),100).
allow("Capacity",(0,1),"B20").
allow("Capacity",(1,1),20).
allow("Capacity",(2,1),250).
allow("Capacity",(0,2),"B50").
allow("Capacity",(1,2),50).
allow("Capacity",(2,2),600).
allow("Capacity",(0,3),"B100").
allow("Capacity",(1,3),100).
allow("Capacity",(2,3),1200).
