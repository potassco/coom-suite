product {
            num /l  0-200   totalVolume
            num /l  0-200   requestedVolume
    0..*    Bag             bags
            Color           color
}

structure Bag {
         Color  color
         Size   size
    0..* Pocket pockets
}

enumeration Pocket { Small Medium Large }

enumeration Color { Green Blue Red }

enumeration Size {
    attribute num weight
    attribute num volume

    small   = ( 10 12 )
    medium  = ( 15 16 )
    large   = ( 25 20 )
}

behavior {
    explanation "The total volume is equal to the sum of the volumes of all bags."
    require totalVolume = sum(bags.size.volume)

    explanation "The total volume must be greater than or equal to the requested volume."
    require totalVolume >= requestedVolume
}

behavior {
    require color = Blue
}

behavior {
    condition color = Blue
    require 2 <= count(bags)
}

behavior Bag {
    require color = Green
}

// BUG: not working correctly
behavior Bag {
    // only works correctly for bags[0]
    // problem: for bags[1] the corresponding incremental constraint/function is only added
    // at bound 2, thus the value of the function is not correctly defined
    // -> it may be necessary to have a new_incremental_function and an update_incremental_function
    // program part
    // in the above example the new incremental function part needs to be added first for the bags[1]
    // this program part should the define the value for all bounds smaller than the current to be whatever the default of the function is

    // require size.weight <= count(pockets)
    require 1 <= count(pockets)
}

behavior Bag {
    // TODO: do explanations have to be added in multishot ?
    // seems to not be necessary
    explanation "The size of the pockets of a bag have to match the size of the bag."
    combinations (size     pockets)
    allow        (small    Small  )
    allow        (medium   Medium )
    allow        (large    Large  )
}
