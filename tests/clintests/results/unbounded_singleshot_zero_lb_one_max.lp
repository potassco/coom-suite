discrete("Color").
discrete("Pocket").
discrete("Closure").
discrete("Size").
domain("Color","Green").
domain("Color","Blue").
domain("Color","Red").
domain("Pocket","S").
domain("Pocket","M").
domain("Pocket","L").
domain("Pocket","XL").
domain("Closure","Zipper").
domain("Closure","Velcro").
domain("Size","small").
domain("Size","medium").
domain("Size","large").
integer("product.totalVolume").
integer("product.requestedVolume").
integer("Size.volume").
range("product.totalVolume",0,200).
range("product.requestedVolume",0,200).
range("Size.volume",12,20).
type("root","product").
type("root.totalVolume[0]","product.totalVolume").
type("root.requestedVolume[0]","product.requestedVolume").
type("root.bags[0]","Bag").
type("root.color[0]","Color").
type("root.bags[0].pockets[0]","Pocket").
type("root.bags[0].color[0]","Color").
type("root.bags[0].size[0]","Size").
type("root.bags[0].closures[0]","Closure").
type("root.bags[0].closures[1]","Closure").
type("root.bags[0].closures[2]","Closure").
type("root.bags[0].size[0].volume[0]","Size.volume").
index("root.totalVolume[0]",0).
index("root.requestedVolume[0]",0).
index("root.bags[0]",0).
index("root.color[0]",0).
index("root.bags[0].pockets[0]",0).
index("root.bags[0].color[0]",0).
index("root.bags[0].size[0]",0).
index("root.bags[0].closures[0]",0).
index("root.bags[0].closures[1]",1).
index("root.bags[0].closures[2]",2).
index("root.bags[0].size[0].volume[0]",0).
parent("root.totalVolume[0]","root").
parent("root.requestedVolume[0]","root").
parent("root.bags[0]","root").
parent("root.color[0]","root").
parent("root.bags[0].pockets[0]","root.bags[0]").
parent("root.bags[0].color[0]","root.bags[0]").
parent("root.bags[0].size[0]","root.bags[0]").
parent("root.bags[0].closures[0]","root.bags[0]").
parent("root.bags[0].closures[1]","root.bags[0]").
parent("root.bags[0].closures[2]","root.bags[0]").
parent("root.bags[0].size[0].volume[0]","root.bags[0].size[0]").
constraint(("root.totalVolume",1),"lowerbound").
constraint(("root.requestedVolume",1),"lowerbound").
constraint(("root.bags",0),"lowerbound").
constraint(("root.color",1),"lowerbound").
constraint(("root.bags[0].color",1),"lowerbound").
constraint(("root.bags[0].size",1),"lowerbound").
constraint(("root.bags[0].pockets",0),"lowerbound").
constraint(("root.bags[0].closures",1),"lowerbound").
constraint(("root.bags[0].size[0].volume",1),"lowerbound").
constraint(("Size","root.bags[0].size[0]"),"table").
constraint((7,"root.bags[0]"),"table").
constraint((8,"root.bags[0]"),"table").
constraint((1,"root.totalVolume[0]>=root.requestedVolume[0]"),"boolean").
constraint((2,"root.color[0]=Blue"),"boolean").
constraint((3,"root.bags[0].color[0]=Green"),"boolean").
constraint((0,"root.totalVolume[0]=sum(root.bags.size.volume)"),"boolean").
constraint((4,"5<count(root.bags.pockets)"),"boolean").
constraint((5,"2<=count(root.bags[0].pockets)"),"boolean").
constraint((6,"2<=count(root.bags[0].closures)"),"boolean").
binary("2<=count(root.bags[0].closures)","2","<=","count(root.bags[0].closures)").
binary("2<=count(root.bags[0].pockets)","2","<=","count(root.bags[0].pockets)").
binary("5<count(root.bags.pockets)","5","<","count(root.bags.pockets)").
binary("root.totalVolume[0]=sum(root.bags.size.volume)","root.totalVolume[0]","=","sum(root.bags.size.volume)").
binary("root.bags[0].color[0]=Green","root.bags[0].color[0]","=","Green").
binary("root.color[0]=Blue","root.color[0]","=","Blue").
binary("root.totalVolume[0]>=root.requestedVolume[0]","root.totalVolume[0]",">=","root.requestedVolume[0]").
column(("Size","root.bags[0].size[0]"),0,1,"root.bags[0].size[0].volume[0]").
column(("Size","root.bags[0].size[0]"),0,0,"root.bags[0].size[0]").
column((7,"root.bags[0]"),("root.bags[0].size[0]",("root.bags[0].pockets[0]",())),0,"root.bags[0].size[0]").
column((7,"root.bags[0]"),("root.bags[0].size[0]",("root.bags[0].pockets[0]",())),1,"root.bags[0].pockets[0]").
column((8,"root.bags[0]"),("root.bags[0].color[0]",("root.bags[0].closures[2]",())),0,"root.bags[0].color[0]").
column((8,"root.bags[0]"),("root.bags[0].color[0]",("root.bags[0].closures[1]",())),0,"root.bags[0].color[0]").
column((8,"root.bags[0]"),("root.bags[0].color[0]",("root.bags[0].closures[0]",())),0,"root.bags[0].color[0]").
column((8,"root.bags[0]"),("root.bags[0].color[0]",("root.bags[0].closures[0]",())),1,"root.bags[0].closures[0]").
column((8,"root.bags[0]"),("root.bags[0].color[0]",("root.bags[0].closures[1]",())),1,"root.bags[0].closures[1]").
column((8,"root.bags[0]"),("root.bags[0].color[0]",("root.bags[0].closures[2]",())),1,"root.bags[0].closures[2]").
allow(7,(0,0),"small").
allow(7,(1,0),"S").
allow(7,(0,1),"medium").
allow(7,(1,1),"M").
allow(7,(0,2),"large").
allow(7,(1,2),"L").
allow(7,(1,2),"XL").
allow(8,(0,0),"Green").
allow(8,(1,0),"Zipper").
allow(8,(1,0),"Velcro").
allow(8,(0,1),"Blue").
allow(8,(0,1),"Red").
allow(8,(1,1),"Zipper").
allow("Size",(0,2),"small").
allow("Size",(0,1),"medium").
allow("Size",(0,0),"large").
allow("Size",(1,0),20).
allow("Size",(1,1),16).
allow("Size",(1,2),12).
function("sum(root.bags.size.volume)","sum","root.bags.size.volume").
function("count(root.bags.pockets)","count","root.bags.pockets").
function("count(root.bags[0].pockets)","count","root.bags[0].pockets").
function("count(root.bags[0].closures)","count","root.bags[0].closures").
set("root.totalVolume","root.totalVolume[0]").
set("root.requestedVolume","root.requestedVolume[0]").
set("root.bags","root.bags[0]").
set("root.color","root.color[0]").
set("root.bags[0].color","root.bags[0].color[0]").
set("root.bags[0].size","root.bags[0].size[0]").
set("root.bags[0].pockets","root.bags[0].pockets[0]").
set("root.bags[0].closures","root.bags[0].closures[0]").
set("root.bags[0].closures","root.bags[0].closures[1]").
set("root.bags[0].closures","root.bags[0].closures[2]").
set("root.bags[0].size[0].volume","root.bags[0].size[0].volume[0]").
set("root.bags.size.volume","root.bags[0].size[0].volume[0]").
set("root.bags.pockets","root.bags[0].pockets[0]").
part("product").
part("Bag").
constant("Blue").
constant("Green").
number("5",5).
number("2",2).
